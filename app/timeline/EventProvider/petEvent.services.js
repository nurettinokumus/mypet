"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var eventModel_1 = require("./eventModel");
var PetEventService = /** @class */ (function () {
    function PetEventService() {
        this.CreateEvents("2");
    }
    PetEventService.prototype.GetEventListByDate = function (petId, date) {
        var res = this._eventList.filter(function (value) {
            return date.getFullYear() == value.eventDate.getFullYear() && date.getMonth() == value.eventDate.getMonth() && date.getDate() == value.eventDate.getDate();
        }).sort(function (a, b) {
            return a.eventDate > b.eventDate ? 1 : 0;
        });
        return res;
    };
    PetEventService.prototype.sortEvents = function () {
        var res = this._eventList.sort(function (a) {
            return a.IsDone ? 1 : 0;
        });
        return res;
    };
    PetEventService.prototype.CreateEvents = function (petId) {
        this._eventList = new Array();
        var now = new Date();
        for (var day = now.getUTCDate() - 10; day < now.getUTCDate() + 10; day++) {
            var stopLimit = Math.floor(Math.random() * 4);
            for (var index_1 = 0; index_1 < 10; index_1++) {
                if (index_1 > stopLimit)
                    break;
                var event = new eventModel_1.EventModel();
                event.PetId = petId;
                event.IsDone = false;
                event.eventDate = new Date(now.getFullYear(), now.getMonth(), day, Math.floor(Math.random() * 24), Math.floor(Math.random() * 60), 0, 0);
                var typeLimit = Math.floor(Math.random() * 10);
                if ((typeLimit % 2) == 0) {
                    event.EventType.Key = "asi";
                    event.EventType.TypeDetail = "Puppy GR";
                    event.EventType.TypeName = "Aşı Zamanı";
                }
                else {
                    event.EventType.Key = "mama";
                    event.EventType.TypeDetail = "Puppy GR";
                    event.EventType.TypeName = "Mama Zamanı";
                }
                this._eventList.push(event);
            }
        }
    };
    return PetEventService;
}());
exports.PetEventService = PetEventService;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGV0RXZlbnQuc2VydmljZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJwZXRFdmVudC5zZXJ2aWNlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUNBLDJDQUEwQztBQUcxQztJQUNJO1FBQ0ksSUFBSSxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUMzQixDQUFDO0lBR00sNENBQWtCLEdBQXpCLFVBQTBCLEtBQWEsRUFBRSxJQUFVO1FBRS9DLElBQUksR0FBRyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLFVBQUMsS0FBSztZQUVuQyxNQUFNLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxJQUFJLEtBQUssQ0FBQyxTQUFTLENBQUMsV0FBVyxFQUFFLElBQUksSUFBSSxDQUFDLFFBQVEsRUFBRSxJQUFJLEtBQUssQ0FBQyxTQUFTLENBQUMsUUFBUSxFQUFFLElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRSxJQUFJLEtBQUssQ0FBQyxTQUFTLENBQUMsT0FBTyxFQUFFLENBQUE7UUFFOUosQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQUMsQ0FBQyxFQUFFLENBQUM7WUFFVCxNQUFNLENBQUMsQ0FBQyxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtRQUM1QyxDQUFDLENBQUMsQ0FBQTtRQUNGLE1BQU0sQ0FBQyxHQUFHLENBQUM7SUFDZixDQUFDO0lBQ00sb0NBQVUsR0FBakI7UUFDSSxJQUFJLEdBQUcsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxVQUFDLENBQUM7WUFFN0IsTUFBTSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO1FBQzNCLENBQUMsQ0FBQyxDQUFBO1FBQ0YsTUFBTSxDQUFDLEdBQUcsQ0FBQztJQUNmLENBQUM7SUFFTSxzQ0FBWSxHQUFuQixVQUFvQixLQUFhO1FBQzdCLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxLQUFLLEVBQWMsQ0FBQztRQUMxQyxJQUFJLEdBQUcsR0FBRyxJQUFJLElBQUksRUFBRSxDQUFDO1FBQ3JCLEdBQUcsQ0FBQyxDQUFDLElBQUksR0FBRyxHQUFHLEdBQUcsQ0FBQyxVQUFVLEVBQUUsR0FBRyxFQUFFLEVBQUUsR0FBRyxHQUFHLEdBQUcsQ0FBQyxVQUFVLEVBQUUsR0FBRyxFQUFFLEVBQUUsR0FBRyxFQUFFLEVBQUUsQ0FBQztZQUN2RSxJQUFJLFNBQVMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQTtZQUM3QyxHQUFHLENBQUMsQ0FBQyxJQUFJLE9BQUssR0FBRyxDQUFDLEVBQUUsT0FBSyxHQUFHLEVBQUUsRUFBRSxPQUFLLEVBQUUsRUFBRSxDQUFDO2dCQUN0QyxFQUFFLENBQUMsQ0FBQyxPQUFLLEdBQUcsU0FBUyxDQUFDO29CQUNsQixLQUFLLENBQUM7Z0JBQ1YsSUFBSSxLQUFLLEdBQUcsSUFBSSx1QkFBVSxFQUFFLENBQUM7Z0JBQzdCLEtBQUssQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO2dCQUNwQixLQUFLLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQztnQkFDckIsS0FBSyxDQUFDLFNBQVMsR0FBRyxJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsV0FBVyxFQUFFLEVBQUUsR0FBRyxDQUFDLFFBQVEsRUFBRSxFQUFFLEdBQUcsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxFQUFFLENBQUMsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7Z0JBQ3pJLElBQUksU0FBUyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFBO2dCQUM5QyxFQUFFLENBQUMsQ0FBQyxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUN2QixLQUFLLENBQUMsU0FBUyxDQUFDLEdBQUcsR0FBRyxLQUFLLENBQUM7b0JBQzVCLEtBQUssQ0FBQyxTQUFTLENBQUMsVUFBVSxHQUFHLFVBQVUsQ0FBQTtvQkFDdkMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxRQUFRLEdBQUcsWUFBWSxDQUFBO2dCQUUzQyxDQUFDO2dCQUNELElBQUksQ0FBQyxDQUFDO29CQUNGLEtBQUssQ0FBQyxTQUFTLENBQUMsR0FBRyxHQUFHLE1BQU0sQ0FBQztvQkFDN0IsS0FBSyxDQUFDLFNBQVMsQ0FBQyxVQUFVLEdBQUcsVUFBVSxDQUFBO29CQUN2QyxLQUFLLENBQUMsU0FBUyxDQUFDLFFBQVEsR0FBRyxhQUFhLENBQUE7Z0JBQzVDLENBQUM7Z0JBQ0EsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUE7WUFDaEMsQ0FBQztRQUdMLENBQUM7SUFHTCxDQUFDO0lBRUwsc0JBQUM7QUFBRCxDQUFDLEFBM0RELElBMkRDO0FBM0RZLDBDQUFlIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT2JzZXJ2YWJsZUFycmF5IH0gZnJvbSBcInRucy1jb3JlLW1vZHVsZXMvZGF0YS9vYnNlcnZhYmxlLWFycmF5L29ic2VydmFibGUtYXJyYXlcIjtcclxuaW1wb3J0IHsgRXZlbnRNb2RlbCB9IGZyb20gXCIuL2V2ZW50TW9kZWxcIjtcclxuaW1wb3J0IHsgRXZlbnRUeXBlTW9kZWwgfSBmcm9tIFwiLi9ldmVudFR5cGUubW9kZWxcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBQZXRFdmVudFNlcnZpY2Uge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgdGhpcy5DcmVhdGVFdmVudHMoXCIyXCIpO1xyXG4gICAgfVxyXG4gICAgcHJpdmF0ZSBfZXZlbnRMaXN0OiBFdmVudE1vZGVsW11cclxuXHJcbiAgICBwdWJsaWMgR2V0RXZlbnRMaXN0QnlEYXRlKHBldElkOiBzdHJpbmcsIGRhdGU6IERhdGUpOiBFdmVudE1vZGVsW10ge1xyXG5cclxuICAgICAgICB2YXIgcmVzID0gdGhpcy5fZXZlbnRMaXN0LmZpbHRlcigodmFsdWUpID0+IHtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiBkYXRlLmdldEZ1bGxZZWFyKCkgPT0gdmFsdWUuZXZlbnREYXRlLmdldEZ1bGxZZWFyKCkgJiYgZGF0ZS5nZXRNb250aCgpID09IHZhbHVlLmV2ZW50RGF0ZS5nZXRNb250aCgpICYmIGRhdGUuZ2V0RGF0ZSgpID09IHZhbHVlLmV2ZW50RGF0ZS5nZXREYXRlKClcclxuXHJcbiAgICAgICAgfSkuc29ydCgoYSwgYikgPT4ge1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIGEuZXZlbnREYXRlID4gYi5ldmVudERhdGUgPyAxIDogMFxyXG4gICAgICAgIH0pXHJcbiAgICAgICAgcmV0dXJuIHJlcztcclxuICAgIH1cclxuICAgIHB1YmxpYyBzb3J0RXZlbnRzKCkge1xyXG4gICAgICAgIHZhciByZXMgPSB0aGlzLl9ldmVudExpc3Quc29ydCgoYSkgPT4ge1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIGEuSXNEb25lID8gMSA6IDBcclxuICAgICAgICB9KVxyXG4gICAgICAgIHJldHVybiByZXM7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIENyZWF0ZUV2ZW50cyhwZXRJZDogc3RyaW5nKSB7XHJcbiAgICAgICAgdGhpcy5fZXZlbnRMaXN0ID0gbmV3IEFycmF5PEV2ZW50TW9kZWw+KCk7XHJcbiAgICAgICAgbGV0IG5vdyA9IG5ldyBEYXRlKCk7XHJcbiAgICAgICAgZm9yIChsZXQgZGF5ID0gbm93LmdldFVUQ0RhdGUoKSAtIDEwOyBkYXkgPCBub3cuZ2V0VVRDRGF0ZSgpICsgMTA7IGRheSsrKSB7XHJcbiAgICAgICAgICAgIHZhciBzdG9wTGltaXQgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiA0KVxyXG4gICAgICAgICAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgMTA7IGluZGV4KyspIHtcclxuICAgICAgICAgICAgICAgIGlmIChpbmRleCA+IHN0b3BMaW1pdClcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIHZhciBldmVudCA9IG5ldyBFdmVudE1vZGVsKCk7XHJcbiAgICAgICAgICAgICAgICBldmVudC5QZXRJZCA9IHBldElkO1xyXG4gICAgICAgICAgICAgICAgZXZlbnQuSXNEb25lID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICBldmVudC5ldmVudERhdGUgPSBuZXcgRGF0ZShub3cuZ2V0RnVsbFllYXIoKSwgbm93LmdldE1vbnRoKCksIGRheSwgTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMjQpLCBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiA2MCksIDAsIDApO1xyXG4gICAgICAgICAgICAgICAgdmFyIHR5cGVMaW1pdCA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDEwKVxyXG4gICAgICAgICAgICAgICAgaWYgKCh0eXBlTGltaXQgJSAyKSA9PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZXZlbnQuRXZlbnRUeXBlLktleSA9IFwiYXNpXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgZXZlbnQuRXZlbnRUeXBlLlR5cGVEZXRhaWwgPSBcIlB1cHB5IEdSXCJcclxuICAgICAgICAgICAgICAgICAgICBldmVudC5FdmVudFR5cGUuVHlwZU5hbWUgPSBcIkHFn8SxIFphbWFuxLFcIlxyXG5cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGV2ZW50LkV2ZW50VHlwZS5LZXkgPSBcIm1hbWFcIjtcclxuICAgICAgICAgICAgICAgICAgICBldmVudC5FdmVudFR5cGUuVHlwZURldGFpbCA9IFwiUHVwcHkgR1JcIlxyXG4gICAgICAgICAgICAgICAgICAgIGV2ZW50LkV2ZW50VHlwZS5UeXBlTmFtZSA9IFwiTWFtYSBaYW1hbsSxXCJcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICB0aGlzLl9ldmVudExpc3QucHVzaChldmVudClcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgIFxyXG5cclxuICAgICAgICB9XHJcblxyXG5cclxuICAgIH1cclxuXHJcbn0iXX0=